name: PR Noise Detector

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out PR branch
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npx jest scripts/detectNoise.test.js

  detect-noise:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Check out PR branch
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Get changed files
        id: changed-files
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const filenames = files.map(f => f.filename);
            return filenames;

      - name: Detect noise and comment
        uses: actions/github-script@v7
        with:
          script: |
            const { detectNoiseFiles, formatNoiseOutput } = require('./scripts/detectNoise');
            
            const changedFiles = ${{ steps.changed-files.outputs.result }};
            const noiseFiles = detectNoiseFiles(changedFiles);
            
            // Find and delete previous bot comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComments = comments.filter(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('potentially superfluous files')
            );
            
            for (const comment of botComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }
            
            // Post new comment if noise found
            if (noiseFiles.length > 0) {
              const output = formatNoiseOutput(noiseFiles, { maxFilesPerDir: 3, groupThreshold: 3 });
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }